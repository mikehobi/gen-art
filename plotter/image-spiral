const canvasSketch = require("canvas-sketch");
const {
  renderPaths,
  createPath,
  pathsToPolylines,
} = require("canvas-sketch-util/penplot");
const { clipPolylinesToBox } = require("canvas-sketch-util/geometry");
const { lerp } = require("canvas-sketch-util/math");
const random = require("canvas-sketch-util/random");
const { pixelData } = require("../utils");

const settings = {
  dimensions: "A4",
  units: "cm",
  pixelsPerInch: 300,
};

const ymargin = 8;
const xmargin = 4;

const rowCount = 100;
const colCount = 100;
const createGrid = (rowCount, colCount) => {
  const rows = [];
  for (let y = 0; y < rowCount; y++) {
    let arr = [];
    for (let x = 0; x < colCount; x++) {
      const u = colCount <= 1 ? 0.5 : x / (colCount - 1);
      const v = rowCount <= 1 ? 0.5 : y / (rowCount - 1);
      arr.push({
        pos: [u, v],
      });
    }
    rows.push(arr);
  }
  return rows;
};

const sketch = (props) => {
  const { width, height, units } = props;

  let img = new Image();
  img.src = "./plotter/images/obama.png";

  let imgh = 1000;
  let imgw = 1000;
  let offScreenCanvas = new OffscreenCanvas(imgw, imgh);
  let offCtx = offScreenCanvas.getContext("2d");

  offCtx.drawImage(img, 0, 0);
  var imgData = offCtx.getImageData(0, 0, imgw, imgh);

  const paths = [];

  let center = {
    x: width / 2,
    y: height / 2,
  };

  const count = 5000;
  let last = [center.x, center.y];
  for (let i = 0; i < count; i++) {
    const p = createPath((context) => {
      let [x, y] = last;
      context.moveTo(x, y);

      let d = i * 0.3;
      let m = 0.008;
      let f = 1;

      x += d * Math.sin(d * f) * m;
      y += d * Math.cos(d * f) * m;

      let u = x / (width - xmargin * 2);
      let v = y / (height - ymargin * 2);

      console.log("xy", x, y);
      console.log("uv", u, v);

      var sampleX = Math.floor(lerp(0, imgw, u));
      var sampleY = Math.floor(lerp(0, imgh, v));

      //   console.log(sampleX, sampleY);

      let [r, g, b, a] = pixelData(imgData.data, imgw, imgh, sampleX, sampleY);
      var brightness = 1 - (r + g + b) / 3 / 255;
      // var brightness = 1 - r / 255;
      //   v -= brightness * 0.01;
      last = [x, y];
      x -= brightness * 0.03;
      y -= brightness * 0.03;
      context.lineTo(x, y);
    });

    paths.push(p);
  }

  let lines = pathsToPolylines(paths, { units });

  const margin = 1;
  const box = [margin, margin, width - margin, height - margin];
  lines = clipPolylinesToBox(lines, box);

  return (props) =>
    renderPaths(lines, {
      ...props,
      lineJoin: "round",
      lineCap: "round",
      lineWidth: 0.02,
      optimize: true,
    });
};

canvasSketch(sketch, settings);
